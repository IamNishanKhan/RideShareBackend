on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: 203.161.48.190
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Free port 80 if needed
            sudo fuser -k 80/tcp || true
            sudo systemctl stop httpd || true
            sudo systemctl disable httpd || true

            # Navigate to deployment directory
            cd /home/Ride

            # Fix Git ownership issue by running Git commands as the 'rideshare' user
            echo "Updating Git repository as rideshare user..."
            sudo -u rideshare bash -c '
              cd /home/Ride
              if [ ! -d .git ]; then
                echo "Initializing new Git repository..."
                git init
                git remote add origin https://${{ secrets.GIT_PAT }}@github.com/IamNishanKhan/RideShareBackend.git
                git fetch origin
                git checkout main
              else
                echo "Ensuring branch is main..."
                CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
                if [ "$CURRENT_BRANCH" != "main" ]; then
                  git branch -m "$CURRENT_BRANCH" main
                fi
                echo "Cleaning working directory..."
                git clean -fd
                git reset --hard
                git fetch origin
                git checkout main
                git branch --set-upstream-to=origin/main main
                git reset --hard origin/main
              fi
              echo "Git status after update:"
              git status
            '
            ls -l  # Debug: List files to confirm update

            # Activate virtual environment and collect static files
            sudo -u rideshare bash -c '
              cd /home/Ride
              source venv/bin/activate
              echo "Collecting static files..."
              python manage.py collectstatic --noinput
            '

            # Restart Gunicorn service
            echo "Restarting Gunicorn..."
            sudo systemctl restart gunicorn
            sleep 5
            GUNICORN_STATUS=$(sudo systemctl status gunicorn)
            if echo "$GUNICORN_STATUS" | grep -q "active (running)"; then
              echo "Gunicorn is running successfully."
            else
              echo "Gunicorn failed to start. Status:"
              echo "$GUNICORN_STATUS"
              exit 1
            fi

            # Restart Nginx service
            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            sleep 5
            NGINX_STATUS=$(sudo systemctl status nginx)
            if echo "$NGINX_STATUS" | grep -q "active (running)"; then
              echo "Nginx is running successfully."
            else
              echo "Nginx failed to start. Status:"
              echo "$NGINX_STATUS"
              exit 1
            fi

            # Check application logs for errors
            echo "Checking application logs..."
            ERROR_LOG=$(journalctl -u gunicorn -n 100 | grep -E -i 'error|exception|traceback|fail|fatal|modulenotfound')
            if [ -n "$ERROR_LOG" ]; then
              echo "Critical error found in Gunicorn logs:"
              echo "$ERROR_LOG"
              exit 1
            else
              echo "No critical errors found in logs. Deployment successful."
            fi

            # Check Nginx logs for errors
            echo "Checking Nginx logs..."
            NGINX_ERROR_LOG=$(cat /var/log/nginx/rideshare_error.log | grep -E -i 'error|fail|fatal')
            if [ -n "$NGINX_ERROR_LOG" ]; then
              echo "Critical error found in Nginx logs:"
              echo "$NGINX_ERROR_LOG"
              exit 1
            else
              echo "No critical errors found in Nginx logs."
            fi